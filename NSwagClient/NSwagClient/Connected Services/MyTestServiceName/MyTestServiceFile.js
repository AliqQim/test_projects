/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.1.0 (NJsonSchema v10.1.21.0 (Newtonsoft.Json v12.0.0.2)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
var MyTestServiceName;
(function (MyTestServiceName) {
    class Client {
        constructor(baseUrl, http) {
            this.jsonParseReviver = undefined;
            this.http = http ? http : window;
            this.baseUrl = baseUrl ? baseUrl : "";
        }
        /**
         * @return Success
         */
        weatherForecastAll() {
            let url_ = this.baseUrl + "/WeatherForecast";
            url_ = url_.replace(/[?&]$/, "");
            let options_ = {
                method: "GET",
                headers: {
                    "Accept": "text/plain"
                }
            };
            return this.http.fetch(url_, options_).then((_response) => {
                return this.processWeatherForecastAll(_response);
            });
        }
        processWeatherForecastAll(response) {
            const status = response.status;
            let _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach((v, k) => _headers[k] = v);
            }
            ;
            if (status === 200) {
                return response.text().then((_responseText) => {
                    let result200 = null;
                    let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    if (Array.isArray(resultData200)) {
                        result200 = [];
                        for (let item of resultData200)
                            result200.push(WeatherForecast.fromJS(item));
                    }
                    return result200;
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        }
        /**
         * вычисление среднего значения. при чем тут температура?
        ну это же WebAPI.Core.Controllers.WeatherForecastController
         * @param value1 первое значение температуры
         * @param value2 (optional) второе значение температуры
         * @return Success
         */
        weatherForecast(value1, value2) {
            let url_ = this.baseUrl + "/WeatherForecast?";
            if (value1 === undefined || value1 === null)
                throw new Error("The parameter 'value1' must be defined and cannot be null.");
            else
                url_ += "value1=" + encodeURIComponent("" + value1) + "&";
            if (value2 === null)
                throw new Error("The parameter 'value2' cannot be null.");
            else if (value2 !== undefined)
                url_ += "value2=" + encodeURIComponent("" + value2) + "&";
            url_ = url_.replace(/[?&]$/, "");
            let options_ = {
                method: "POST",
                headers: {
                    "Accept": "text/plain"
                }
            };
            return this.http.fetch(url_, options_).then((_response) => {
                return this.processWeatherForecast(_response);
            });
        }
        processWeatherForecast(response) {
            const status = response.status;
            let _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach((v, k) => _headers[k] = v);
            }
            ;
            if (status === 200) {
                return response.text().then((_responseText) => {
                    let result200 = null;
                    let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    result200 = resultData200 !== undefined ? resultData200 : null;
                    return result200;
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        }
        /**
         * проверяем, является ли особа годной телочкой. см. WebAPI.Core.Controllers.WeatherForecastController.Person
         * @param body (optional)
         * @return Success
         */
        isAvailableForChattingUp(body) {
            let url_ = this.baseUrl + "/WeatherForecast/IsAvailableForChattingUp";
            url_ = url_.replace(/[?&]$/, "");
            const content_ = JSON.stringify(body);
            let options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "text/plain"
                }
            };
            return this.http.fetch(url_, options_).then((_response) => {
                return this.processIsAvailableForChattingUp(_response);
            });
        }
        processIsAvailableForChattingUp(response) {
            const status = response.status;
            let _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach((v, k) => _headers[k] = v);
            }
            ;
            if (status === 200) {
                return response.text().then((_responseText) => {
                    let result200 = null;
                    let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    result200 = resultData200 !== undefined ? resultData200 : null;
                    return result200;
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        }
    }
    MyTestServiceName.Client = Client;
    class WeatherForecast {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(_data) {
            if (_data) {
                this.date = _data["date"] ? new Date(_data["date"].toString()) : undefined;
                this.temperatureC = _data["temperatureC"];
                this.temperatureF = _data["temperatureF"];
                this.summary = _data["summary"];
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            let result = new WeatherForecast();
            result.init(data);
            return result;
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            data["date"] = this.date ? this.date.toISOString() : undefined;
            data["temperatureC"] = this.temperatureC;
            data["temperatureF"] = this.temperatureF;
            data["summary"] = this.summary;
            return data;
        }
    }
    MyTestServiceName.WeatherForecast = WeatherForecast;
    /** особа для проверки */
    class Person {
        constructor(data) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        this[property] = data[property];
                }
            }
        }
        init(_data) {
            if (_data) {
                this.name = _data["name"];
                this.lastName = _data["lastName"];
                this.age = _data["age"];
                this.isFemale = _data["isFemale"];
            }
        }
        static fromJS(data) {
            data = typeof data === 'object' ? data : {};
            let result = new Person();
            result.init(data);
            return result;
        }
        toJSON(data) {
            data = typeof data === 'object' ? data : {};
            data["name"] = this.name;
            data["lastName"] = this.lastName;
            data["age"] = this.age;
            data["isFemale"] = this.isFemale;
            return data;
        }
    }
    MyTestServiceName.Person = Person;
    class ApiException extends Error {
        constructor(message, status, response, headers, result) {
            super();
            this.isApiException = true;
            this.message = message;
            this.status = status;
            this.response = response;
            this.headers = headers;
            this.result = result;
        }
        static isApiException(obj) {
            return obj.isApiException === true;
        }
    }
    MyTestServiceName.ApiException = ApiException;
    function throwException(message, status, response, headers, result) {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new ApiException(message, status, response, headers, null);
    }
})(MyTestServiceName || (MyTestServiceName = {}));
